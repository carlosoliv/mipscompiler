/*
 * Generated by classgen, version 1.5
 * 7/12/17 11:45 AM
 */
package ast;

public class Args implements SyntaxNode {

  private SyntaxNode parent;
  public String id;
  public Args args;

  public Args (String id, Args args) {
    this.id = id;
    this.args = args;
    if (args != null) args.setParent(this);
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (args != null) args.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (args != null) args.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (args != null) args.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("Args(\n");
    buffer.append("  "+tab+id);
    buffer.append("\n");
      if (args != null)
        buffer.append(args.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [Args]");
    return buffer.toString();
  }
}
