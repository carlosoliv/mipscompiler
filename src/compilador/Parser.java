
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 12 11:45:40 BRT 2017
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import java.util.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 12 11:45:40 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\004\007\000\002\004" +
    "\003\000\002\005\004\000\002\005\003\000\002\006\012" +
    "\000\002\007\005\000\002\007\003\000\002\011\003\000" +
    "\002\011\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\012\000\002\010\005\000\002\010\006\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\007\005\027\007\001\002\000\004\002" +
    "\uffff\001\002\000\004\027\017\001\002\000\004\002\016" +
    "\001\002\000\004\014\012\001\002\000\006\002\ufffd\007" +
    "\005\001\002\000\004\002\ufffe\001\002\000\004\026\013" +
    "\001\002\000\004\020\014\001\002\000\006\007\005\027" +
    "\007\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002\000\004\024\020\001\002\000\004\027\021\001" +
    "\002\000\006\021\060\025\ufffa\001\002\000\004\025\023" +
    "\001\002\000\004\014\024\001\002\000\010\004\027\026" +
    "\030\027\025\001\002\000\034\005\ufff6\006\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\024\052\025\ufff6\001\002\000\014\010\035" +
    "\011\032\012\042\013\040\020\051\001\002\000\010\004" +
    "\027\026\030\027\025\001\002\000\032\005\ufff7\006\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\025\ufff7\001\002\000\020\010\035" +
    "\011\032\012\042\013\040\015\034\016\037\017\041\001" +
    "\002\000\010\004\uffee\026\uffee\027\uffee\001\002\000\010" +
    "\004\027\026\030\027\025\001\002\000\010\004\ufff2\026" +
    "\ufff2\027\ufff2\001\002\000\010\004\uffef\026\uffef\027\uffef" +
    "\001\002\000\010\004\027\026\030\027\025\001\002\000" +
    "\010\004\ufff1\026\ufff1\027\ufff1\001\002\000\010\004\uffec" +
    "\026\uffec\027\uffec\001\002\000\010\004\ufff0\026\ufff0\027" +
    "\ufff0\001\002\000\010\004\uffed\026\uffed\027\uffed\001\002" +
    "\000\032\005\ufff4\006\ufff4\010\035\011\032\012\042\013" +
    "\040\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\025\ufff4" +
    "\001\002\000\014\005\045\010\035\011\032\012\042\013" +
    "\040\001\002\000\010\004\027\026\030\027\025\001\002" +
    "\000\014\006\047\010\035\011\032\012\042\013\040\001" +
    "\002\000\010\004\027\026\030\027\025\001\002\000\032" +
    "\005\ufff5\006\ufff5\010\035\011\032\012\042\013\040\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\025\ufff5\001\002" +
    "\000\006\002\ufffc\007\ufffc\001\002\000\010\004\027\026" +
    "\030\027\025\001\002\000\016\010\035\011\032\012\042" +
    "\013\040\021\ufff9\025\ufff9\001\002\000\006\021\056\025" +
    "\055\001\002\000\032\005\ufff3\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\025\ufff3\001\002\000\010\004\027\026\030\027\025" +
    "\001\002\000\016\010\035\011\032\012\042\013\040\021" +
    "\ufff8\025\ufff8\001\002\000\004\027\021\001\002\000\004" +
    "\025\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\004\005\005\003\006\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\010\006\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\014" +
    "\005\003\006\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\025\001\001\000\002\001\001\000\004\002\035\001\001" +
    "\000\004\010\030\001\001\000\002\001\001\000\006\002" +
    "\035\003\032\001\001\000\002\001\001\000\004\010\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\035\001\001\000" +
    "\004\002\035\001\001\000\004\010\045\001\001\000\004" +
    "\002\035\001\001\000\004\010\047\001\001\000\004\002" +
    "\035\001\001\000\002\001\001\000\006\010\052\011\053" +
    "\001\001\000\004\002\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\056\001\001\000\004\002\035" +
    "\001\001\000\004\007\060\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error (Symbol s) {
        report_error("Erro de sintaxe na linha: " + (s.right) + ", coluna: " + (s.left+1) + ". Token: '" +s.value+ "'", null);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
//        System.out.println("\nErro irreparavel na linha " + (s.right)+ ", coluna "+(s.left+1)+". Identificador " +s.value + " n√£o reconhecido.");
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opArit ::= DIV 
            {
              String RESULT =null;
		int divileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int diviright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object divi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (String)divi;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opArit ::= TIMES 
            {
              String RESULT =null;
		int vezesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vezesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vezes = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (String)vezes;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opArit ::= MINUS 
            {
              String RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object menos = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (String)menos;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opArit ::= PLUS 
            {
              String RESULT =null;
		int maisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mais = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (String)mais;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opRel ::= GR 
            {
              String RESULT =null;
		int maiorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maiorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object maior = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (String)maior;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // opRel ::= LE 
            {
              String RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (String)menor;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // opRel ::= EQ 
            {
              String RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = (String)igual;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRel",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= IDENT LPAREN SEQ RPAREN 
            {
              E RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Seq se = (Seq)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new Decla (id, se);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= E opArit E 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		    RESULT = new OpArit(e1,op,e2);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= IF E opRel E THEN E ELSE E 
            {
              E RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		E e1 = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		E e2 = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		E e3 = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		E e4 = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		    RESULT = new IfThenElse(e1, or, e2, e3, e4);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= IDENT 
            {
              E RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Ident(ide);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= INT 
            {
              E RESULT =null;
		int inteileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inteiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer intei = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new NumberExp(intei);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEQ ::= SEQ COM E 
            {
              Seq RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Seq se = (Seq)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eseq1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eseq1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		E eseq1 = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Seq (se, eseq1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SEQ ::= E 
            {
              Seq RESULT =null;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		E eseq = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Seq (null, eseq);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS ::= IDENT 
            {
              Args RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Args (i, null);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGS ::= IDENT COM ARGS 
            {
              Args RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
						
            RESULT = new Args (i, args);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= DEF IDENT LPAREN ARGS RPAREN ASM E SEMI 
            {
              Def RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Args ar = (Args)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		E ed = (E)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
									
            RESULT = new Def(func, ar, ed);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // I ::= D 
            {
              I RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new I(d, null);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // I ::= D I 
            {
              I RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Def d = (Def)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		I i = (I)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new I(d, i);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= I 
            {
              Block RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		I i = (I)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
      RESULT = i;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= IDENT ASM INT SEMI P 
            {
              Block RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer i2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block p1 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new Asm(i1,new NumberExp(i2),p1);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

